#!/usr/bin/env node

/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2015, Joyent, Inc.
 */

/*
 * Portolan CLI
 */

var mod_backend = require('../lib/backend');
var mod_bunyan = require('bunyan');
var mod_client = require('../lib/client');
var mod_cmdln = require('cmdln');
var mod_common = require('../lib/common');
var config = require('../etc/config.json');
var mod_types = require('../lib/types');
var mod_util = require('util');
var VError = require('verror').VError;



// --- Globals



var OPTS = {
    cn: {
        names: [ 'cn' ],
        type: 'string',
        help: 'Compute Node UUID'
    },

    help: {
        names: [ 'help', 'h' ],
        type: 'bool',
        help: 'Print help and exit'
    },

    host: {
        names: [ 'host' ],
        type: 'string',
        help: 'Portolan host to connect to'
    },

    ip: {
        names: [ 'ip' ],
        type: 'string',
        help: 'IP address'
    },

    mac: {
        names: [ 'mac' ],
        type: 'string',
        help: 'MAC address'
    },

    port: {
        names: [ 'port' ],
        type: 'positiveInteger',
        help: 'Portolan host port'
    },

    vnet_id: {
        names: [ 'vnet-id' ],
        type: 'positiveInteger',
        help: 'Virtual network ID'
    }
};



// --- Internal



/**
 * Output some pretty JSON
 */
function json(obj) {
    console.log(JSON.stringify(obj, null, 2));
}


/**
 * Set the hostname and port for client opts
 */
function setClientOpts(opts, clientOpts) {
    clientOpts.host = opts.host || 'localhost';
    clientOpts.port = opts.port || config.port;
}


/**
 * Rename the options in {Object} opts using {Object} trans (which maps
 * key names in opts to their translated names).  Throw an error if any
 * options are missing.
 */
function translateOpts(opts, trans) {
    var missing = [];
    var translated = {};

    for (var t in trans) {
        if (opts.hasOwnProperty(t)) {
            translated[trans[t]] = opts[t];
        } else {
            missing.push(t);
        }
    }

    if (missing.length !== 0) {
        throw new VError('missing option%s: %s',
            (missing.length == 1 ? '' : 's'),
            missing.join(', '));
    }

    return translated;
}



// --- PortolanCLI object



function PortolanCLI() {
    mod_cmdln.Cmdln.call(this, {
        name: 'portolan',
        description: 'portolan CLI',
        options: [
            OPTS.help
        ]
    });
}

mod_util.inherits(PortolanCLI, mod_cmdln.Cmdln);


/**
 * Run before the subcommand methods - overall initialization
 */
PortolanCLI.prototype.init = function _init(opts, args, callback) {
    mod_backend.load(config);

    config.log = mod_bunyan.createLogger({
        name: 'portolan',
        level: process.env.LOG_LEVEL || 'fatal'
    });
    mod_backend.init(config, callback);
};


/**
 * Add an overlay mapping
 */
PortolanCLI.prototype['do_add-overlay'] =
    function _addOverlay(subcmd, opts, args, callback) {
    var backendOpts;
    try {
        backendOpts = translateOpts(opts, {
            cn: 'cn_uuid',
            ip: 'ip',
            mac: 'mac',
            vnet_id: 'vnet_id'
        });
        mod_common.validate.opts(backendOpts);
    } catch (optsErr) {
        return callback(optsErr);
    }

    backendOpts.ip = mod_common.IPv6obj(backendOpts.ip);
    backendOpts.mac = mod_common.macToInt(backendOpts.mac);

    mod_backend.addOverlayMapping(backendOpts, callback);
};

PortolanCLI.prototype['do_add-overlay'].options = [
    OPTS.cn,
    OPTS.ip,
    OPTS.mac,
    OPTS.vnet_id
];


/**
 * Add an underlay mapping
 */
PortolanCLI.prototype['do_add-underlay'] =
    function _addUnderlay(subcmd, opts, args, callback) {
    var backendOpts;
    try {
        backendOpts = translateOpts(opts, {
            cn: 'cn_uuid',
            ip: 'ip'
        });
        mod_common.validate.opts(backendOpts);
    } catch (optsErr) {
        return callback(optsErr);
    }

    backendOpts.ip = mod_common.IPv6obj(backendOpts.ip);
    backendOpts.port = mod_types.VXLAN_PORT;

    mod_backend.addUnderlayMapping(backendOpts, callback);
};

PortolanCLI.prototype['do_add-underlay'].options = [
    OPTS.cn,
    OPTS.ip
];


/**
 * Ping the portolan server
 */
PortolanCLI.prototype['do_ping'] =
    function _ping(subcmd, opts, args, callback) {
    var connOpts = {};
    setClientOpts(opts, connOpts);

    var client = mod_client.connect(connOpts, function _afterVl2Conn(err) {
        if (err) {
            return callback(err);
        }

        client.ping(function (err2, res) {
            if (err2) {
                return callback(err2);
            }

            json(res);
            return callback();
        });
    });
};

PortolanCLI.prototype['do_ping'].options = [
    OPTS.host,
    OPTS.port
];


/**
 * Do a L2 lookup
 */
PortolanCLI.prototype['do_vl2-lookup'] =
    function _vl2Req(subcmd, opts, args, callback) {
    var connOpts;
    try {
        connOpts = translateOpts(opts, {
            mac: 'mac',
            vnet_id: 'vnet_id'
        });
        mod_common.validate.opts(connOpts);
    } catch (optsErr) {
        return callback(optsErr);
    }

    setClientOpts(opts, connOpts);
    var client = mod_client.connect(connOpts, function _afterVl2Conn(err) {
        if (err) {
            return callback(err);
        }

        client.vl2Req(connOpts, function (err2, res) {
            if (err2) {
                return callback(err2);
            }

            json(res);
            return callback();
        });
    });
};

PortolanCLI.prototype['do_vl2-lookup'].options = [
    OPTS.host,
    OPTS.mac,
    OPTS.port,
    OPTS.vnet_id
];


/**
 * Do a L3 lookup
 */
PortolanCLI.prototype['do_vl3-lookup'] =
    function _vl3Req(subcmd, opts, args, callback) {
    var connOpts;
    try {
        connOpts = translateOpts(opts, {
            ip: 'ip',
            vnet_id: 'vnet_id'
        });
        mod_common.validate.opts(connOpts);
    } catch (optsErr) {
        return callback(optsErr);
    }

    setClientOpts(opts, connOpts);
    connOpts.ip = mod_common.IPv6obj(opts.ip);

    var client = mod_client.connect(connOpts, function _afterVl2Conn(err) {
        if (err) {
            return callback(err);
        }

        client.vl3Req(connOpts, function (err2, res) {
            if (err2) {
                return callback(err2);
            }

            json(res);
            return callback();
        });
    });
};

PortolanCLI.prototype['do_vl3-lookup'].options = [
    OPTS.host,
    OPTS.ip,
    OPTS.port,
    OPTS.vnet_id
];


var cli = new PortolanCLI();
mod_cmdln.main(cli);
